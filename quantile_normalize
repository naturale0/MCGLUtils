#!/usr/local/bin/python
import argparse
import sys
import pandas as pd
import numpy as np

parser = argparse.ArgumentParser(description='Quantile normalize input .csv file. As a result, every column in the output file have same distributions. Contact Sihyung Park for details',
                                 prog="./quantile_normalize")
parser.add_argument('input', type=str, nargs=1, help='input .csv file to normalize')
parser.add_argument('-s', type=str, nargs='?', help='stat to use when normalizing file. Currently possible: mean, median. (Default=mean)',
                    metavar="mean/median", default=["mean"])
parser.add_argument('-r', help='if the input .csv contains header row.',
                    action="store_true")
parser.add_argument('-c', help='if the input .csv contains index column.',
                    action="store_true")
args = parser.parse_args()


def quantile_normalize(file_path, stat, header, index_col, save_file=True):
    if index_col is True:
        index_col = 0
    else: index_col = None
    if header is True:
        header = 0
    else: header = None
    df = pd.read_csv(file_path, index_col=index_col, header=header)
    df_rank = df.rank(method="first")

    df_stat = df.copy()
    for col in df_stat.columns:
        df_stat[col] = sorted(df[col].values)

    if stat == "mean":
        stat_ranked = pd.DataFrame(df_stat.mean(axis=1))
    elif stat == "median":
        stat_ranked = pd.DataFrame(df_stat.median(axis=1))
    else:
        raise TypeError("-c flag should be 'mean' or 'median'.")

    if index_col == 0:
        stat_ranked.reset_index(inplace=True)
        del stat_ranked["index"]
    rank_stat_dict = stat_ranked.to_dict()[0]

    def lookup_rank(row):
        return [rank_stat_dict[int(i)-1] for i in row]

    res = df_rank.apply(lookup_rank)

    if save_file:
        outname = ".".join(file_path.split(".")[:-1]) + "__q_normed.csv"
        if index_col == 0 and header == 0:
            res.to_csv(outname, index=True)
        elif index_col == 0:
            res.to_csv(outname, index=True, header=False)
        elif index_col != 0 and header == 0:
            res.to_csv(outname, index=False)
        else:
            res.to_csv(outname, index=False, header=False)


    return

if __name__ == "__main__":
    input_csv = args.input[0]
    stat = args.s[0]
    index_col = args.c
    header = args.r
    quantile_normalize(input_csv, stat, header, index_col)
